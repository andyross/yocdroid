Building
========

You will need a Poky linux tree in the local directory (a symlink
works fine) as "./poky".  You can get this from the upstream git with:

    git clone git://git.yoctoproject.org/poky

Building an x86 image is as simple as "make".  The output tarball will
appear in tmp/deploy/images.  Simply unpack this under /data/y on your
Android device.

The build will automatically download original source tarballs for all
the installed software (typically from high performance mirrors run by
yoctoproject.org).  The resulting files (about 6GB) will be placed in
the "oe-downloads" subdirectory of the user's home directory.  This is
so that repeated builds or "cleaned" trees don't need to re-download
source.  Do not delete this directory or its contents or you will
force a re-fetch.

If you want to work directly with bitbake (which is notoriously
sensitive to a correct build environment and working directory), the
Makefile will create a "bbwrap" wrapper script for you ("make bbwrap")
which sets up the environment correctly and then launches bitbake with
the supplied arguments.  So e.g. "./bbwrap -c devshell
my-package-name" does what you want.

You may edit the installed package list directly in
recipes/yocdroid-image/yocdroid-image.bb or with an
"IMAGE_INSTALL_append += ..." setting in conf/local.conf.  The
IMAGE_FEATURES mechanism from Yocto works as well, but be careful with
it because many of the existing default package lists tend to pull in
unwanted dependencies.

Installing
==========

The result tarball expects to be unpacked under /data/y on the target.
There is a "make install" target currently that does this
automatically over adb to the default connected device, though it
depends on a /system/xbin/busybox/tar.

Optionally, there is a "make install-ssh" target available to
bootstrap ssh authentication over adb using the current user's public
keys.  By default, all accounts have no password and sshd will not
allow access.

Once installed, at a root shell root on the device, run
"/data/y/sbin/yocdroid-start" to initialize the chroot environment.
Then "/data/y/sbin/yocdroid-run [command...]" will run the specified
command (by default a login shell) in the chroot.  Remember that the
path to the command must be a full path relative to the root of the
chroot.

A very useful trick is running:

    adb shell /data/y/sbin/yocdroid-start
    adb shell /data/y/sbin/yocdroid-run /etc/init.d/rc 3

...to launch all the runlevel 3 daemons, including sshd.  The same
commands can be added as a service in /init.rc to launch the
environment automatically at boot.  There is also a "make start"
target which does this over adb.
