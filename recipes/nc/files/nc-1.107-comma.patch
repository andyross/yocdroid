diff --git a/nc.1 b/nc.1
index e1dec7f..e32ac21 100644
--- a/nc.1
+++ b/nc.1
@@ -281,7 +281,7 @@ sockets, a destination is required and is the socket path to connect to
 option is given).
 .Pp
 .Ar port
-can be a single integer or a range of ports.
+can be one or more comma-separated integers or ranges of ports.
 Ranges are in the form nn-mm.
 In general,
 a destination port must be specified,
diff --git a/netcat.c b/netcat.c
index f58298f..4a95dfc 100644
--- a/netcat.c
+++ b/netcat.c
@@ -812,56 +812,67 @@ void
 build_ports(char *p)
 {
 	const char *errstr;
-	char *n;
+	char *n, *comma;
 	int hi, lo, cp;
 	int x = 0;
 
-	if ((n = strchr(p, '-')) != NULL) {
-		*n = '\0';
-		n++;
-
-		/* Make sure the ports are in order: lowest->highest. */
-		hi = strtonum(n, 1, PORT_MAX, &errstr);
-		if (errstr)
-			errx(1, "port number %s: %s", errstr, n);
-		lo = strtonum(p, 1, PORT_MAX, &errstr);
-		if (errstr)
-			errx(1, "port number %s: %s", errstr, p);
-
-		if (lo > hi) {
-			cp = hi;
-			hi = lo;
-			lo = cp;
-		}
+	do {
+		comma = strchr(p, ',');
+		if (comma)
+			*comma = '\0';
+
+		if ((n = strchr(p, '-')) != NULL) {
+			*n = '\0';
+			n++;
+
+			/* Make sure the ports are in order: lowest->highest. */
+			hi = strtonum(n, 1, PORT_MAX, &errstr);
+			if (errstr)
+				errx(1, "port number %s: %s", errstr, n);
+			lo = strtonum(p, 1, PORT_MAX, &errstr);
+			if (errstr)
+				errx(1, "port number %s: %s", errstr, p);
+
+			if (lo > hi) {
+				cp = hi;
+				hi = lo;
+				lo = cp;
+			}
 
-		/* Load ports sequentially. */
-		for (cp = lo; cp <= hi; cp++) {
-			portlist[x] = calloc(1, PORT_MAX_LEN);
-			if (portlist[x] == NULL)
+			/* Load ports sequentially. */
+			for (cp = lo; cp <= hi; cp++) {
+				portlist[x] = calloc(1, PORT_MAX_LEN);
+				if (portlist[x] == NULL)
+					err(1, NULL);
+				snprintf(portlist[x], PORT_MAX_LEN, "%d", cp);
+				x++;
+			}
+
+		} else {
+			hi = strtonum(p, 1, PORT_MAX, &errstr);
+			if (errstr)
+				errx(1, "port number %s: %s", errstr, p);
+			portlist[x] = strdup(p);
+			if (portlist[0] == NULL)
 				err(1, NULL);
-			snprintf(portlist[x], PORT_MAX_LEN, "%d", cp);
 			x++;
 		}
 
-		/* Randomly swap ports. */
-		if (rflag) {
-			int y;
-			char *c;
+		if (comma)
+			p = comma + 1;
+	} while (comma);
 
-			for (x = 0; x <= (hi - lo); x++) {
-				y = (arc4random() & 0xFFFF) % (hi - lo);
-				c = portlist[x];
-				portlist[x] = portlist[y];
-				portlist[y] = c;
-			}
+	/* Randomly swap ports. */
+	if (rflag) {
+		int y;
+		char *c;
+
+		for (x = 0; x <= (hi - lo); x++) {
+			y = (arc4random() & 0xFFFF) % (hi - lo);
+			c = portlist[x];
+			portlist[x] = portlist[y];
+			portlist[y] = c;
 		}
-	} else {
-		hi = strtonum(p, 1, PORT_MAX, &errstr);
-		if (errstr)
-			errx(1, "port number %s: %s", errstr, p);
-		portlist[0] = strdup(p);
-		if (portlist[0] == NULL)
-			err(1, NULL);
 	}
 }
 
