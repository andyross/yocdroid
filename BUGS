BUGS:

+ No meaningful effort has been made to secure the installation.
  There are no known holes (it lives in /data, which is not writable
  to apps), but for the moment it's safest to assume that a clever
  downloaded app will be able to bootstrap local root access if
  yocdroid is installed.

+ The installation and starup process depends on a busybox tar and
  bzip2.  The startup process depends on various busybox utilities
  that aren't in AOSP.  It would be nice to make these work on AOSP
  alone.  How about copying the Yocto busybox+libc.so and running them
  with a wrapper script?

+ There is no way to "stop" the environment.  The bind mounts won't
  unmount until all the processes using them are killed.  Consider
  placing them all in a cgroup a-la systemd...

+ The kernel initrd rootfs cannot be bind mounted.  So the yocdroid
  chroot has no access to it (it's read-only and non-persistent, of
  course, but sometimes it's nice to check what the init.rc said for
  the current system).  Maybe make copies of the files in root and
  bind mount subdirectories?

+ The bind mount environment is static and doesn't track changes to
  the filesystem (e.g. app asec mounts) automatically.  This could be
  handled with a small daemon listening on a netlink socket.

+ The recursive bind mount (/data/y/data is a mount of /data -- it
  lives inside itself) seems to trigger a kernel bug where mounting
  inside /data produces two copies of the mount, one in the expected
  place and another under /data/y.

+ There is no integration with the Android user/group IDs.  Everything
  but root appears as a numeric ID to the linux personality.
  Amusingly, the list is statically defined (in C code!) in
  system/core/include/private/android_filesystem_config.h.  This list
  should be merged with the core IDs in the base-passwd package.

+ The procps utilities (uptime is the most obvious to test) report a
  warning of "Unknown HZ value! (xx) Assume 100."  Frustratingly
  google results for this error are dominated by discussion of a few
  rootkits which install stale procps versions which trigger the
  warning and don't detail the actual issue.

+ On a default android device, the nosuid flag for /data is inherited
  by the bind mount, so suid binaries won't work.  For remote access
  via a root shell that's fine that's fine, but local access from an
  app (e.g. Term.apk) context requires a working su.  It also prevents
  many utilities (e.g. ping) from running as non-root users.
